/**
 * This class is generated by jOOQ
 */
package org.openforis.users.jooq;


import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.openforis.users.jooq.tables.OfUser;
import org.openforis.users.jooq.tables.records.OfUserRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>OF_USERS</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<OfUserRecord, Long> IDENTITY_OF_USER = Identities0.IDENTITY_OF_USER;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<OfUserRecord> PK_OF_USER = UniqueKeys0.PK_OF_USER;
	public static final UniqueKey<OfUserRecord> UNIQUE_USERNAME = UniqueKeys0.UNIQUE_USERNAME;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<OfUserRecord, Long> IDENTITY_OF_USER = createIdentity(OfUser.OF_USER, OfUser.OF_USER.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<OfUserRecord> PK_OF_USER = createUniqueKey(OfUser.OF_USER, OfUser.OF_USER.ID);
		public static final UniqueKey<OfUserRecord> UNIQUE_USERNAME = createUniqueKey(OfUser.OF_USER, OfUser.OF_USER.USERNAME);
	}
}
