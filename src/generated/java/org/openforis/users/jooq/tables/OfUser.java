/*
 * This file is generated by jOOQ.
*/
package org.openforis.users.jooq.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.users.jooq.Keys;
import org.openforis.users.jooq.OfUsers;
import org.openforis.users.jooq.tables.records.OfUserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfUser extends TableImpl<OfUserRecord> {

    private static final long serialVersionUID = -1319956430;

    /**
     * The reference instance of <code>OF_USERS.OF_USER</code>
     */
    public static final OfUser OF_USER = new OfUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfUserRecord> getRecordType() {
        return OfUserRecord.class;
    }

    /**
     * The column <code>OF_USERS.OF_USER.ID</code>.
     */
    public final TableField<OfUserRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR OF_USERS.SYSTEM_SEQUENCE_63783653_E845_4FD6_A038_4CA2A3E7DFFB)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.USERNAME</code>.
     */
    public final TableField<OfUserRecord, String> USERNAME = createField("USERNAME", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.PASSWORD</code>.
     */
    public final TableField<OfUserRecord, String> PASSWORD = createField("PASSWORD", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.ENABLED</code>.
     */
    public final TableField<OfUserRecord, Boolean> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("FALSE", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.LAT</code>.
     */
    public final TableField<OfUserRecord, BigDecimal> LAT = createField("LAT", org.jooq.impl.SQLDataType.DECIMAL.precision(65535, 32767), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.LON</code>.
     */
    public final TableField<OfUserRecord, BigDecimal> LON = createField("LON", org.jooq.impl.SQLDataType.DECIMAL.precision(65535, 32767), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.LOCATION</code>.
     */
    public final TableField<OfUserRecord, String> LOCATION = createField("LOCATION", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.AFFILIATIONS</code>.
     */
    public final TableField<OfUserRecord, String> AFFILIATIONS = createField("AFFILIATIONS", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>OF_USERS.OF_USER.CREATION_DATE</code>.
     */
    public final TableField<OfUserRecord, Timestamp> CREATION_DATE = createField("CREATION_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>OF_USERS.OF_USER</code> table reference
     */
    public OfUser() {
        this("OF_USER", null);
    }

    /**
     * Create an aliased <code>OF_USERS.OF_USER</code> table reference
     */
    public OfUser(String alias) {
        this(alias, OF_USER);
    }

    private OfUser(String alias, Table<OfUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfUser(String alias, Table<OfUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return OfUsers.OF_USERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OfUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_OF_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OfUserRecord> getPrimaryKey() {
        return Keys.PK_OF_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OfUserRecord>> getKeys() {
        return Arrays.<UniqueKey<OfUserRecord>>asList(Keys.PK_OF_USER, Keys.OF_UNIQUE_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OfUser as(String alias) {
        return new OfUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfUser rename(String name) {
        return new OfUser(name, null);
    }
}
